
1073070040-final-exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e14  08005e14  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e1c  08005e1c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000020  08005e44  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08005e44  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010919  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002707  00000000  00000000  000309ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000330b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac7  00000000  00000000  00033eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026770  00000000  00000000  0003497f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121cf  00000000  00000000  0005b0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb03b  00000000  00000000  0006d2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000396c  00000000  00000000  001582fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0015bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005034 	.word	0x08005034

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005034 	.word	0x08005034

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxCpltCallback>:
uint8_t contcc;
uint8_t password[] = {1,0,7,3,0,7,0,0,4,0};
uint8_t error = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	ring_buffer_put(&ring_buffer_uart_rx, data);
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <HAL_UART_RxCpltCallback+0x28>)
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	4619      	mov	r1, r3
 80004d2:	4807      	ldr	r0, [pc, #28]	; (80004f0 <HAL_UART_RxCpltCallback+0x2c>)
 80004d4:	f004 fad6 	bl	8004a84 <ring_buffer_put>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <HAL_UART_RxCpltCallback+0x28>)
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_UART_RxCpltCallback+0x30>)
 80004de:	f002 ffc5 	bl	800346c <HAL_UART_Receive_IT>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200001a0 	.word	0x200001a0
 80004f0:	200001ac 	.word	0x200001ac
 80004f4:	20000118 	.word	0x20000118

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fbaa 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f89c 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f98c 	bl	8000820 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f95a 	bl	80007c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800050c:	f000 f8e8 	bl	80006e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f926 	bl	8000760 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000514:	f004 fb50 	bl	8004bb8 <ssd1306_Init>
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 10);
 8000518:	220a      	movs	r2, #10
 800051a:	493d      	ldr	r1, [pc, #244]	; (8000610 <main+0x118>)
 800051c:	483d      	ldr	r0, [pc, #244]	; (8000614 <main+0x11c>)
 800051e:	f004 fa95 	bl	8004a4c <ring_buffer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	  ssd1306_Fill(Black);
 8000522:	2000      	movs	r0, #0
 8000524:	f004 fbb2 	bl	8004c8c <ssd1306_Fill>
  	  ssd1306_SetCursor(20, 20);
 8000528:	2114      	movs	r1, #20
 800052a:	2014      	movs	r0, #20
 800052c:	f004 fcfc 	bl	8004f28 <ssd1306_SetCursor>
  	  ssd1306_WriteString("WAITING...", Font_11x18, White);
 8000530:	4a39      	ldr	r2, [pc, #228]	; (8000618 <main+0x120>)
 8000532:	2301      	movs	r3, #1
 8000534:	ca06      	ldmia	r2, {r1, r2}
 8000536:	4839      	ldr	r0, [pc, #228]	; (800061c <main+0x124>)
 8000538:	f004 fcd0 	bl	8004edc <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 800053c:	f004 fbca 	bl	8004cd4 <ssd1306_UpdateScreen>
  	  HAL_UART_Receive_IT(&huart2, rx_data, 1	);
 8000540:	2201      	movs	r2, #1
 8000542:	4937      	ldr	r1, [pc, #220]	; (8000620 <main+0x128>)
 8000544:	4837      	ldr	r0, [pc, #220]	; (8000624 <main+0x12c>)
 8000546:	f002 ff91 	bl	800346c <HAL_UART_Receive_IT>
  	    // Si se recibe algún dato, reinicia el buffer y la pantalla muestra 'WAITING...'

  	    }

  	    // Si la secuencia recibida coincide con la contraseña y el buffer está lleno, muestra 'PASS' en la pantalla
  	    if ((memcmp(rx_buffer, password, 10) == 0) && (ring_buffer_is_full(&ring_buffer_uart_rx) == 1)) {
 800054a:	220a      	movs	r2, #10
 800054c:	4936      	ldr	r1, [pc, #216]	; (8000628 <main+0x130>)
 800054e:	4830      	ldr	r0, [pc, #192]	; (8000610 <main+0x118>)
 8000550:	f004 fd34 	bl	8004fbc <memcmp>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d114      	bne.n	8000584 <main+0x8c>
 800055a:	482e      	ldr	r0, [pc, #184]	; (8000614 <main+0x11c>)
 800055c:	f004 facf 	bl	8004afe <ring_buffer_is_full>
 8000560:	4603      	mov	r3, r0
 8000562:	2b01      	cmp	r3, #1
 8000564:	d10e      	bne.n	8000584 <main+0x8c>
  	        ssd1306_Fill(White);
 8000566:	2001      	movs	r0, #1
 8000568:	f004 fb90 	bl	8004c8c <ssd1306_Fill>
  	        ssd1306_SetCursor(20, 20);
 800056c:	2114      	movs	r1, #20
 800056e:	2014      	movs	r0, #20
 8000570:	f004 fcda 	bl	8004f28 <ssd1306_SetCursor>
  	        ssd1306_WriteString("Success", Font_11x18, Black);
 8000574:	4a28      	ldr	r2, [pc, #160]	; (8000618 <main+0x120>)
 8000576:	2300      	movs	r3, #0
 8000578:	ca06      	ldmia	r2, {r1, r2}
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <main+0x134>)
 800057c:	f004 fcae 	bl	8004edc <ssd1306_WriteString>
  	        ssd1306_UpdateScreen();
 8000580:	f004 fba8 	bl	8004cd4 <ssd1306_UpdateScreen>
  	    }

  	    // Si la secuencia recibida no coincide con la contraseña y el buffer está lleno, muestra 'FAIL' en la pantalla
  	    if ((memcmp(rx_buffer, password, 10) != 0) && (ring_buffer_is_full(&ring_buffer_uart_rx) == 1)) {
 8000584:	220a      	movs	r2, #10
 8000586:	4928      	ldr	r1, [pc, #160]	; (8000628 <main+0x130>)
 8000588:	4821      	ldr	r0, [pc, #132]	; (8000610 <main+0x118>)
 800058a:	f004 fd17 	bl	8004fbc <memcmp>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d01d      	beq.n	80005d0 <main+0xd8>
 8000594:	481f      	ldr	r0, [pc, #124]	; (8000614 <main+0x11c>)
 8000596:	f004 fab2 	bl	8004afe <ring_buffer_is_full>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d117      	bne.n	80005d0 <main+0xd8>
  	        ssd1306_Fill(Black);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f004 fb73 	bl	8004c8c <ssd1306_Fill>
  	        ssd1306_SetCursor(20, 20);
 80005a6:	2114      	movs	r1, #20
 80005a8:	2014      	movs	r0, #20
 80005aa:	f004 fcbd 	bl	8004f28 <ssd1306_SetCursor>
  	        ssd1306_WriteString("Failed", Font_11x18, White);
 80005ae:	4a1a      	ldr	r2, [pc, #104]	; (8000618 <main+0x120>)
 80005b0:	2301      	movs	r3, #1
 80005b2:	ca06      	ldmia	r2, {r1, r2}
 80005b4:	481e      	ldr	r0, [pc, #120]	; (8000630 <main+0x138>)
 80005b6:	f004 fc91 	bl	8004edc <ssd1306_WriteString>
  	        ssd1306_UpdateScreen();
 80005ba:	f004 fb8b 	bl	8004cd4 <ssd1306_UpdateScreen>
  	        error ++;
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <main+0x13c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <main+0x13c>)
 80005c8:	701a      	strb	r2, [r3, #0]
  	        ring_buffer_reset(&ring_buffer_uart_rx);
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <main+0x11c>)
 80005cc:	f004 faa8 	bl	8004b20 <ring_buffer_reset>
  	    }
  	    HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 fbba 	bl	8000d4c <HAL_Delay>
  	    if (error == 3){
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <main+0x13c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d1b4      	bne.n	800054a <main+0x52>
  	    	ssd1306_Fill(Black);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f004 fb53 	bl	8004c8c <ssd1306_Fill>
  	    	ssd1306_SetCursor(20, 20);
 80005e6:	2114      	movs	r1, #20
 80005e8:	2014      	movs	r0, #20
 80005ea:	f004 fc9d 	bl	8004f28 <ssd1306_SetCursor>
  	    	ssd1306_WriteString("Blocked", Font_11x18, White);
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <main+0x120>)
 80005f0:	2301      	movs	r3, #1
 80005f2:	ca06      	ldmia	r2, {r1, r2}
 80005f4:	4810      	ldr	r0, [pc, #64]	; (8000638 <main+0x140>)
 80005f6:	f004 fc71 	bl	8004edc <ssd1306_WriteString>
  	    	ssd1306_UpdateScreen();
 80005fa:	f004 fb6b 	bl	8004cd4 <ssd1306_UpdateScreen>
  	    	HAL_Delay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f000 fba3 	bl	8000d4c <HAL_Delay>
  	    	error = 0; //Se reinicia el error a 0
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <main+0x13c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
  		if (data == 0) {
 800060c:	e79d      	b.n	800054a <main+0x52>
 800060e:	bf00      	nop
 8000610:	200001b8 	.word	0x200001b8
 8000614:	200001ac 	.word	0x200001ac
 8000618:	20000018 	.word	0x20000018
 800061c:	0800504c 	.word	0x0800504c
 8000620:	200001c8 	.word	0x200001c8
 8000624:	20000118 	.word	0x20000118
 8000628:	20000000 	.word	0x20000000
 800062c:	08005058 	.word	0x08005058
 8000630:	08005060 	.word	0x08005060
 8000634:	200001d2 	.word	0x200001d2
 8000638:	08005068 	.word	0x08005068

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	; 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2244      	movs	r2, #68	; 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fcc6 	bl	8004fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000662:	f001 fba3 	bl	8001dac <HAL_PWREx_ControlVoltageScaling>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800066c:	f000 f93e 	bl	80008ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2310      	movs	r3, #16
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800068a:	230a      	movs	r3, #10
 800068c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068e:	2307      	movs	r3, #7
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fbda 	bl	8001e58 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006aa:	f000 f91f 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 ffa2 	bl	8002610 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f90b 	bl	80008ec <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3758      	adds	r7, #88	; 0x58
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_I2C1_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_I2C1_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_I2C1_Init+0x74>)
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <MX_I2C1_Init+0x7c>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <MX_I2C1_Init+0x74>)
 800071c:	f000 fe8c 	bl	8001438 <HAL_I2C_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000726:	f000 f8e1 	bl	80008ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <MX_I2C1_Init+0x74>)
 800072e:	f001 fa97 	bl	8001c60 <HAL_I2CEx_ConfigAnalogFilter>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000738:	f000 f8d8 	bl	80008ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800073c:	2100      	movs	r1, #0
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_I2C1_Init+0x74>)
 8000740:	f001 fad9 	bl	8001cf6 <HAL_I2CEx_ConfigDigitalFilter>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f8cf 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000003c 	.word	0x2000003c
 8000758:	40005400 	.word	0x40005400
 800075c:	10909cec 	.word	0x10909cec

08000760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <MX_USART1_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART1_UART_Init+0x58>)
 80007a4:	f002 fe14 	bl	80033d0 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f89d 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000090 	.word	0x20000090
 80007bc:	40013800 	.word	0x40013800

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x58>)
 8000804:	f002 fde4 	bl	80033d0 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f86d 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000118 	.word	0x20000118
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fdb3 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0xc8>)
 80008ba:	f000 fbfb 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fbec 	bl	80010b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000800 	.word	0x48000800

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_MspInit+0x44>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6613      	str	r3, [r2, #96]	; 0x60
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_MspInit+0x44>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x44>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6593      	str	r3, [r2, #88]	; 0x58
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x44>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ac      	sub	sp, #176	; 0xb0
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2288      	movs	r2, #136	; 0x88
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fb3b 	bl	8004fdc <memset>
  if(hi2c->Instance==I2C1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <HAL_I2C_MspInit+0xb0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d13b      	bne.n	80009e8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000970:	2340      	movs	r3, #64	; 0x40
 8000972:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000974:	2300      	movs	r3, #0
 8000976:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f86b 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000988:	f7ff ffb0 	bl	80008ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_I2C_MspInit+0xb4>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_I2C_MspInit+0xb4>)
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_I2C_MspInit+0xb4>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	2312      	movs	r3, #18
 80009ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009be:	2304      	movs	r3, #4
 80009c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c8:	4619      	mov	r1, r3
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <HAL_I2C_MspInit+0xb8>)
 80009cc:	f000 fb72 	bl	80010b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_I2C_MspInit+0xb4>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_I2C_MspInit+0xb4>)
 80009d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009da:	6593      	str	r3, [r2, #88]	; 0x58
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_I2C_MspInit+0xb4>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	37b0      	adds	r7, #176	; 0xb0
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40005400 	.word	0x40005400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000400 	.word	0x48000400

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0ae      	sub	sp, #184	; 0xb8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	2288      	movs	r2, #136	; 0x88
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 fadd 	bl	8004fdc <memset>
  if(huart->Instance==USART1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <HAL_UART_MspInit+0x158>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d145      	bne.n	8000ab8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a30:	2300      	movs	r3, #0
 8000a32:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 f80d 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a44:	f7ff ff52 	bl	80008ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a48:	4b43      	ldr	r3, [pc, #268]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4c:	4a42      	ldr	r2, [pc, #264]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a52:	6613      	str	r3, [r2, #96]	; 0x60
 8000a54:	4b40      	ldr	r3, [pc, #256]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a3c      	ldr	r2, [pc, #240]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a92:	2307      	movs	r3, #7
 8000a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fb07 	bl	80010b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2025      	movs	r0, #37	; 0x25
 8000aac:	f000 fa4d 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab0:	2025      	movs	r0, #37	; 0x25
 8000ab2:	f000 fa66 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab6:	e048      	b.n	8000b4a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <HAL_UART_MspInit+0x160>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d143      	bne.n	8000b4a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 ffc2 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000ada:	f7ff ff07 	bl	80008ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0x15c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f000 fabd 	bl	80010b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2026      	movs	r0, #38	; 0x26
 8000b40:	f000 fa03 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b44:	2026      	movs	r0, #38	; 0x26
 8000b46:	f000 fa1c 	bl	8000f82 <HAL_NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	37b8      	adds	r7, #184	; 0xb8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40013800 	.word	0x40013800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40004400 	.word	0x40004400

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f8ae 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <USART1_IRQHandler+0x10>)
 8000bba:	f002 fca3 	bl	8003504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000090 	.word	0x20000090

08000bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART2_IRQHandler+0x10>)
 8000bce:	f002 fc99 	bl	8003504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000118 	.word	0x20000118

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f004 f9dd 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fc61 	bl	80004f8 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c44:	08005e24 	.word	0x08005e24
  ldr r2, =_sbss
 8000c48:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c4c:	200005e0 	.word	0x200005e0

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_Init+0x3c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_Init+0x3c>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f000 f962 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f80f 	bl	8000c94 <HAL_InitTick>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	e001      	b.n	8000c86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c82:	f7ff fe39 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40022000 	.word	0x40022000

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_InitTick+0x6c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d023      	beq.n	8000cf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_InitTick+0x70>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_InitTick+0x6c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f96d 	bl	8000f9e <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10f      	bne.n	8000cea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d809      	bhi.n	8000ce4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f937 	bl	8000f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_InitTick+0x74>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e007      	b.n	8000cf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e004      	b.n	8000cf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e001      	b.n	8000cf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000014 	.word	0x20000014
 8000d04:	2000000c 	.word	0x2000000c
 8000d08:	20000010 	.word	0x20000010

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000014 	.word	0x20000014
 8000d30:	200001d4 	.word	0x200001d4

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	200001d4 	.word	0x200001d4

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff ffee 	bl	8000d34 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffde 	bl	8000d34 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000014 	.word	0x20000014

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff29 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff3e 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff8e 	bl	8000e88 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5d 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff31 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa2 	bl	8000ef0 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d008      	beq.n	8000fe0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e022      	b.n	8001026 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 020e 	bic.w	r2, r2, #14
 8000fee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	f003 021c 	and.w	r2, r3, #28
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d005      	beq.n	8001056 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2204      	movs	r2, #4
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e029      	b.n	80010aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 020e 	bic.w	r2, r2, #14
 8001064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f003 021c 	and.w	r2, r3, #28
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	4798      	blx	r3
    }
  }
  return status;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e17f      	b.n	80013c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8171 	beq.w	80013be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_GPIO_Init+0x40>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 0201 	and.w	r2, r3, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b03      	cmp	r3, #3
 8001160:	d118      	bne.n	8001194 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001168:	2201      	movs	r2, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d017      	beq.n	80011d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	6939      	ldr	r1, [r7, #16]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80ac 	beq.w	80013be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_GPIO_Init+0x330>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	4a5e      	ldr	r2, [pc, #376]	; (80013e4 <HAL_GPIO_Init+0x330>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	; 0x60
 8001272:	4b5c      	ldr	r3, [pc, #368]	; (80013e4 <HAL_GPIO_Init+0x330>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800127e:	4a5a      	ldr	r2, [pc, #360]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012a8:	d025      	beq.n	80012f6 <HAL_GPIO_Init+0x242>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_GPIO_Init+0x338>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x23e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <HAL_GPIO_Init+0x33c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x23a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <HAL_GPIO_Init+0x340>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x236>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_GPIO_Init+0x344>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x232>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <HAL_GPIO_Init+0x348>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x22e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <HAL_GPIO_Init+0x34c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x22a>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012f6:	2300      	movs	r3, #0
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001308:	4937      	ldr	r1, [pc, #220]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_GPIO_Init+0x350>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800133a:	4a32      	ldr	r2, [pc, #200]	; (8001404 <HAL_GPIO_Init+0x350>)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_GPIO_Init+0x350>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_GPIO_Init+0x350>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_GPIO_Init+0x350>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_GPIO_Init+0x350>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_GPIO_Init+0x350>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <HAL_GPIO_Init+0x350>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f47f ae78 	bne.w	80010c4 <HAL_GPIO_Init+0x10>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	48000400 	.word	0x48000400
 80013f0:	48000800 	.word	0x48000800
 80013f4:	48000c00 	.word	0x48000c00
 80013f8:	48001000 	.word	0x48001000
 80013fc:	48001400 	.word	0x48001400
 8001400:	48001800 	.word	0x48001800
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001424:	e002      	b.n	800142c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e08d      	b.n	8001566 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fa6e 	bl	8000940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	e006      	b.n	80014c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d108      	bne.n	80014da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	e007      	b.n	80014ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800150c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69d9      	ldr	r1, [r3, #28]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2220      	movs	r2, #32
 8001552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	817b      	strh	r3, [r7, #10]
 8001582:	460b      	mov	r3, r1
 8001584:	813b      	strh	r3, [r7, #8]
 8001586:	4613      	mov	r3, r2
 8001588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 80f9 	bne.w	800178a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_I2C_Mem_Write+0x34>
 800159e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0ed      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_I2C_Mem_Write+0x4e>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e0e6      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015c6:	f7ff fbb5 	bl	8000d34 <HAL_GetTick>
 80015ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2319      	movs	r3, #25
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f955 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0d1      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2221      	movs	r2, #33	; 0x21
 80015ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2240      	movs	r2, #64	; 0x40
 80015f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001608:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001610:	88f8      	ldrh	r0, [r7, #6]
 8001612:	893a      	ldrh	r2, [r7, #8]
 8001614:	8979      	ldrh	r1, [r7, #10]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4603      	mov	r3, r0
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f8b9 	bl	8001798 <I2C_RequestMemoryWrite>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0a9      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d90e      	bls.n	8001660 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	22ff      	movs	r2, #255	; 0xff
 8001646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164c:	b2da      	uxtb	r2, r3
 800164e:	8979      	ldrh	r1, [r7, #10]
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 facf 	bl	8001bfc <I2C_TransferConfig>
 800165e:	e00f      	b.n	8001680 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	b2da      	uxtb	r2, r3
 8001670:	8979      	ldrh	r1, [r7, #10]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fabe 	bl	8001bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f94e 	bl	8001926 <I2C_WaitOnTXISFlagUntilTimeout>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e07b      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d034      	beq.n	8001738 <HAL_I2C_Mem_Write+0x1c8>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d130      	bne.n	8001738 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	2200      	movs	r2, #0
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f8d1 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e04d      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d90e      	bls.n	8001718 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	22ff      	movs	r2, #255	; 0xff
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	b2da      	uxtb	r2, r3
 8001706:	8979      	ldrh	r1, [r7, #10]
 8001708:	2300      	movs	r3, #0
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fa73 	bl	8001bfc <I2C_TransferConfig>
 8001716:	e00f      	b.n	8001738 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	b2da      	uxtb	r2, r3
 8001728:	8979      	ldrh	r1, [r7, #10]
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fa62 	bl	8001bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d19e      	bne.n	8001680 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f934 	bl	80019b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e01a      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2220      	movs	r2, #32
 800175c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_I2C_Mem_Write+0x224>)
 800176a:	400b      	ands	r3, r1
 800176c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800178a:	2302      	movs	r3, #2
  }
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	fe00e800 	.word	0xfe00e800

08001798 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	817b      	strh	r3, [r7, #10]
 80017aa:	460b      	mov	r3, r1
 80017ac:	813b      	strh	r3, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	8979      	ldrh	r1, [r7, #10]
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <I2C_RequestMemoryWrite+0xa4>)
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fa1b 	bl	8001bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	69b9      	ldr	r1, [r7, #24]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f8ab 	bl	8001926 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e02c      	b.n	8001834 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d105      	bne.n	80017ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017e0:	893b      	ldrh	r3, [r7, #8]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
 80017ea:	e015      	b.n	8001818 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017ec:	893b      	ldrh	r3, [r7, #8]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	69b9      	ldr	r1, [r7, #24]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f891 	bl	8001926 <I2C_WaitOnTXISFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e012      	b.n	8001834 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800180e:	893b      	ldrh	r3, [r7, #8]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2200      	movs	r2, #0
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f830 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	80002000 	.word	0x80002000

08001840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d103      	bne.n	800185e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d007      	beq.n	800187c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	619a      	str	r2, [r3, #24]
  }
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001898:	e031      	b.n	80018fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d02d      	beq.n	80018fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a2:	f7ff fa47 	bl	8000d34 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d302      	bcc.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d122      	bne.n	80018fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	4013      	ands	r3, r2
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d113      	bne.n	80018fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f043 0220 	orr.w	r2, r3, #32
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4013      	ands	r3, r2
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	429a      	cmp	r2, r3
 800190c:	bf0c      	ite	eq
 800190e:	2301      	moveq	r3, #1
 8001910:	2300      	movne	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	429a      	cmp	r2, r3
 800191a:	d0be      	beq.n	800189a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001932:	e033      	b.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f87f 	bl	8001a3c <I2C_IsErrorOccurred>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e031      	b.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194e:	d025      	beq.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001950:	f7ff f9f0 	bl	8000d34 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11a      	bne.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b02      	cmp	r3, #2
 8001972:	d013      	beq.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2220      	movs	r2, #32
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e007      	b.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d1c4      	bne.n	8001934 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019c0:	e02f      	b.n	8001a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f838 	bl	8001a3c <I2C_IsErrorOccurred>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e02d      	b.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d6:	f7ff f9ad 	bl	8000d34 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d302      	bcc.n	80019ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d11a      	bne.n	8001a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d013      	beq.n	8001a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f043 0220 	orr.w	r2, r3, #32
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e007      	b.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d1c8      	bne.n	80019c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d068      	beq.n	8001b3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a70:	e049      	b.n	8001b06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d045      	beq.n	8001b06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a7a:	f7ff f95b 	bl	8000d34 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d302      	bcc.n	8001a90 <I2C_IsErrorOccurred+0x54>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d13a      	bne.n	8001b06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab2:	d121      	bne.n	8001af8 <I2C_IsErrorOccurred+0xbc>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aba:	d01d      	beq.n	8001af8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d01a      	beq.n	8001af8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ad0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ad2:	f7ff f92f 	bl	8000d34 <HAL_GetTick>
 8001ad6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad8:	e00e      	b.n	8001af8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ada:	f7ff f92b 	bl	8000d34 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b19      	cmp	r3, #25
 8001ae6:	d907      	bls.n	8001af8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001af6:	e006      	b.n	8001b06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d1e9      	bne.n	8001ada <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d003      	beq.n	8001b1c <I2C_IsErrorOccurred+0xe0>
 8001b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0aa      	beq.n	8001a72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00b      	beq.n	8001ba8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01c      	beq.n	8001bea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff fe45 	bl	8001840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <I2C_IsErrorOccurred+0x1bc>)
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	fe00e800 	.word	0xfe00e800

08001bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	817b      	strh	r3, [r7, #10]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c14:	7a7b      	ldrb	r3, [r7, #9]
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	0d5b      	lsrs	r3, r3, #21
 8001c36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <I2C_TransferConfig+0x60>)
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	ea02 0103 	and.w	r1, r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c4e:	bf00      	nop
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	03ff63ff 	.word	0x03ff63ff

08001c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d138      	bne.n	8001ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e032      	b.n	8001cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d139      	bne.n	8001d80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e033      	b.n	8001d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2224      	movs	r2, #36	; 0x24
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e000      	b.n	8001d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
  }
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40007000 	.word	0x40007000

08001dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dba:	d130      	bne.n	8001e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc8:	d038      	beq.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2232      	movs	r2, #50	; 0x32
 8001de0:	fb02 f303 	mul.w	r3, r2, r3
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0c9b      	lsrs	r3, r3, #18
 8001dec:	3301      	adds	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df0:	e002      	b.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e04:	d102      	bne.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f2      	bne.n	8001df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e18:	d110      	bne.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e00f      	b.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2a:	d007      	beq.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e34:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	2000000c 	.word	0x2000000c
 8001e54:	431bde83 	.word	0x431bde83

08001e58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e3ca      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b97      	ldr	r3, [pc, #604]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b94      	ldr	r3, [pc, #592]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80e4 	beq.w	8002054 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4a>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	f040 808b 	bne.w	8001fb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	f040 8087 	bne.w	8001fb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ea2:	4b89      	ldr	r3, [pc, #548]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x62>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e3a2      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d004      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x7c>
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_OscConfig+0x88>
 8001ed4:	4b7c      	ldr	r3, [pc, #496]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d223      	bcs.n	8001f2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fd55 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e383      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef8:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	496d      	ldr	r1, [pc, #436]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f16:	4b6c      	ldr	r3, [pc, #432]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	4968      	ldr	r1, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
 8001f2a:	e025      	b.n	8001f78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f32:	f043 0308 	orr.w	r3, r3, #8
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4960      	ldr	r1, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	495b      	ldr	r1, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fd15 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e343      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f78:	f000 fc4a 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b52      	ldr	r3, [pc, #328]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	4950      	ldr	r1, [pc, #320]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_RCC_OscConfig+0x278>)
 8001f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f98:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_RCC_OscConfig+0x27c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fe79 	bl	8000c94 <HAL_InitTick>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d052      	beq.n	8002052 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	e327      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d032      	beq.n	800201e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a42      	ldr	r2, [pc, #264]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe feb6 	bl	8000d34 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fcc:	f7fe feb2 	bl	8000d34 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e310      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fea:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a36      	ldr	r2, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4931      	ldr	r1, [pc, #196]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	492c      	ldr	r1, [pc, #176]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
 800201c:	e01a      	b.n	8002054 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202a:	f7fe fe83 	bl	8000d34 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002032:	f7fe fe7f 	bl	8000d34 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e2dd      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x1da>
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d074      	beq.n	800214a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x21a>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d10e      	bne.n	800208a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d10b      	bne.n	800208a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d064      	beq.n	8002148 <HAL_RCC_OscConfig+0x2f0>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d160      	bne.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e2ba      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x24a>
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e026      	b.n	80020f0 <HAL_RCC_OscConfig+0x298>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020aa:	d115      	bne.n	80020d8 <HAL_RCC_OscConfig+0x280>
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 80020b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a02      	ldr	r2, [pc, #8]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e014      	b.n	80020f0 <HAL_RCC_OscConfig+0x298>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08005070 	.word	0x08005070
 80020d0:	2000000c 	.word	0x2000000c
 80020d4:	20000010 	.word	0x20000010
 80020d8:	4ba0      	ldr	r3, [pc, #640]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a9f      	ldr	r2, [pc, #636]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b9d      	ldr	r3, [pc, #628]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a9c      	ldr	r2, [pc, #624]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80020ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe1c 	bl	8000d34 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe fe18 	bl	8000d34 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e276      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002112:	4b92      	ldr	r3, [pc, #584]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x2a8>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe fe08 	bl	8000d34 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe fe04 	bl	8000d34 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e262      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x2d0>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d060      	beq.n	8002218 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d005      	beq.n	8002168 <HAL_RCC_OscConfig+0x310>
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d119      	bne.n	8002196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d116      	bne.n	8002196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002168:	4b7c      	ldr	r3, [pc, #496]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_OscConfig+0x328>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e23f      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b76      	ldr	r3, [pc, #472]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	4973      	ldr	r1, [pc, #460]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002194:	e040      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d023      	beq.n	80021e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219e:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6e      	ldr	r2, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe fdc3 	bl	8000d34 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b2:	f7fe fdbf 	bl	8000d34 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e21d      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c4:	4b65      	ldr	r3, [pc, #404]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b62      	ldr	r3, [pc, #392]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	495f      	ldr	r1, [pc, #380]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
 80021e4:	e018      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	4b5d      	ldr	r3, [pc, #372]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a5c      	ldr	r2, [pc, #368]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80021ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7fe fd9f 	bl	8000d34 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7fe fd9b 	bl	8000d34 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1f9      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d03c      	beq.n	800229e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01c      	beq.n	8002266 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002232:	4a4a      	ldr	r2, [pc, #296]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7fe fd7a 	bl	8000d34 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002244:	f7fe fd76 	bl	8000d34 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1d4      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ef      	beq.n	8002244 <HAL_RCC_OscConfig+0x3ec>
 8002264:	e01b      	b.n	800229e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226c:	4a3b      	ldr	r2, [pc, #236]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002276:	f7fe fd5d 	bl	8000d34 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227e:	f7fe fd59 	bl	8000d34 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1b7      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002290:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ef      	bne.n	800227e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80a6 	beq.w	80023f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10d      	bne.n	80022d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c6:	6593      	str	r3, [r2, #88]	; 0x58
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_OscConfig+0x504>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x508>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d118      	bne.n	8002316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_OscConfig+0x508>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x508>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f0:	f7fe fd20 	bl	8000d34 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7fe fd1c 	bl	8000d34 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e17a      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_RCC_OscConfig+0x508>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d108      	bne.n	8002330 <HAL_RCC_OscConfig+0x4d8>
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800232e:	e029      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d115      	bne.n	8002364 <HAL_RCC_OscConfig+0x50c>
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_RCC_OscConfig+0x504>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002358:	e014      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	4b9c      	ldr	r3, [pc, #624]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	4a9b      	ldr	r2, [pc, #620]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002374:	4b98      	ldr	r3, [pc, #608]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	4a97      	ldr	r2, [pc, #604]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d016      	beq.n	80023ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe fcd2 	bl	8000d34 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7fe fcce 	bl	8000d34 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e12a      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	4b8b      	ldr	r3, [pc, #556]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ed      	beq.n	8002394 <HAL_RCC_OscConfig+0x53c>
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fcbb 	bl	8000d34 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fcb7 	bl	8000d34 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e113      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d8:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ed      	bne.n	80023c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e6:	7ffb      	ldrb	r3, [r7, #31]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b7a      	ldr	r3, [pc, #488]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	4a79      	ldr	r2, [pc, #484]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80fe 	beq.w	80025fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	2b02      	cmp	r3, #2
 8002408:	f040 80d0 	bne.w	80025ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800240c:	4b72      	ldr	r3, [pc, #456]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	429a      	cmp	r2, r3
 800241e:	d130      	bne.n	8002482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	3b01      	subs	r3, #1
 800242c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d127      	bne.n	8002482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d11f      	bne.n	8002482 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800244c:	2a07      	cmp	r2, #7
 800244e:	bf14      	ite	ne
 8002450:	2201      	movne	r2, #1
 8002452:	2200      	moveq	r2, #0
 8002454:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002456:	4293      	cmp	r3, r2
 8002458:	d113      	bne.n	8002482 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	3b01      	subs	r3, #1
 8002468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d109      	bne.n	8002482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d06e      	beq.n	8002560 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d069      	beq.n	800255c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0ad      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024a4:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a4b      	ldr	r2, [pc, #300]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80024aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024b0:	f7fe fc40 	bl	8000d34 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fc3c 	bl	8000d34 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e09a      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_RCC_OscConfig+0x784>)
 80024dc:	4013      	ands	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024e6:	3a01      	subs	r2, #1
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	4311      	orrs	r1, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024f0:	0212      	lsls	r2, r2, #8
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024f8:	0852      	lsrs	r2, r2, #1
 80024fa:	3a01      	subs	r2, #1
 80024fc:	0552      	lsls	r2, r2, #21
 80024fe:	4311      	orrs	r1, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002504:	0852      	lsrs	r2, r2, #1
 8002506:	3a01      	subs	r2, #1
 8002508:	0652      	lsls	r2, r2, #25
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002510:	0912      	lsrs	r2, r2, #4
 8002512:	0452      	lsls	r2, r2, #17
 8002514:	430a      	orrs	r2, r1
 8002516:	4930      	ldr	r1, [pc, #192]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800251c:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2d      	ldr	r2, [pc, #180]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002534:	f7fe fbfe 	bl	8000d34 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fbfa 	bl	8000d34 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e058      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800255a:	e050      	b.n	80025fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e04f      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d148      	bne.n	80025fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002584:	f7fe fbd6 	bl	8000d34 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fbd2 	bl	8000d34 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e030      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x734>
 80025aa:	e028      	b.n	80025fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d023      	beq.n	80025fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <HAL_RCC_OscConfig+0x780>)
 80025b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fbb9 	bl	8000d34 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c4:	e00c      	b.n	80025e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fbb5 	bl	8000d34 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d905      	bls.n	80025e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e013      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x7b0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ec      	bne.n	80025c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_OscConfig+0x7b0>)
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4905      	ldr	r1, [pc, #20]	; (8002608 <HAL_RCC_OscConfig+0x7b0>)
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x7b4>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
 80025f8:	e001      	b.n	80025fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	feeefffc 	.word	0xfeeefffc

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0e7      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b75      	ldr	r3, [pc, #468]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d910      	bls.n	8002654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0207 	bic.w	r2, r3, #7
 800263a:	4970      	ldr	r1, [pc, #448]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b6e      	ldr	r3, [pc, #440]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cf      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d010      	beq.n	8002682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266c:	429a      	cmp	r2, r3
 800266e:	d908      	bls.n	8002682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4960      	ldr	r1, [pc, #384]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04c      	beq.n	8002728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0a6      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e09a      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c6:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e08e      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d6:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e086      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4943      	ldr	r1, [pc, #268]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe fb1c 	bl	8000d34 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe fb18 	bl	8000d34 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e06e      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002740:	429a      	cmp	r2, r3
 8002742:	d208      	bcs.n	8002756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	492b      	ldr	r1, [pc, #172]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d210      	bcs.n	8002786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 0207 	bic.w	r2, r3, #7
 800276c:	4923      	ldr	r1, [pc, #140]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e036      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4918      	ldr	r1, [pc, #96]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4910      	ldr	r1, [pc, #64]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c4:	f000 f824 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	490b      	ldr	r1, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x1f4>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80027e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1fc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fa53 	bl	8000c94 <HAL_InitTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40022000 	.word	0x40022000
 8002800:	40021000 	.word	0x40021000
 8002804:	08005070 	.word	0x08005070
 8002808:	2000000c 	.word	0x2000000c
 800280c:	20000010 	.word	0x20000010

08002810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281e:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002828:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x34>
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d121      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d11e      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e005      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800286c:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_RCC_GetSysClockFreq+0x10c>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10d      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d102      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_RCC_GetSysClockFreq+0x110>)
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e004      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d101      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_RCC_GetSysClockFreq+0x114>)
 8002896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d134      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d003      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0xac>
 80028b4:	e005      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_RCC_GetSysClockFreq+0x110>)
 80028b8:	617b      	str	r3, [r7, #20]
      break;
 80028ba:	e005      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_GetSysClockFreq+0x114>)
 80028be:	617b      	str	r3, [r7, #20]
      break;
 80028c0:	e002      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	617b      	str	r3, [r7, #20]
      break;
 80028c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	3301      	adds	r3, #1
 80028d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	fb03 f202 	mul.w	r2, r3, r2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	0e5b      	lsrs	r3, r3, #25
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	3301      	adds	r3, #1
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002908:	69bb      	ldr	r3, [r7, #24]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	08005088 	.word	0x08005088
 8002920:	00f42400 	.word	0x00f42400
 8002924:	007a1200 	.word	0x007a1200

08002928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_GetHCLKFreq+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000000c 	.word	0x2000000c

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002944:	f7ff fff0 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	08005080 	.word	0x08005080

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002970:	f7ff ffda 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4904      	ldr	r1, [pc, #16]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	08005080 	.word	0x08005080

08002998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029b0:	f7ff f9ee 	bl	8001d90 <HAL_PWREx_GetVoltageRange>
 80029b4:	6178      	str	r0, [r7, #20]
 80029b6:	e014      	b.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029d0:	f7ff f9de 	bl	8001d90 <HAL_PWREx_GetVoltageRange>
 80029d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e8:	d10b      	bne.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d919      	bls.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2ba0      	cmp	r3, #160	; 0xa0
 80029f4:	d902      	bls.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f6:	2302      	movs	r3, #2
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e013      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e010      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d902      	bls.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a08:	2303      	movs	r3, #3
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e00a      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d102      	bne.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a14:	2302      	movs	r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e004      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d101      	bne.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 0207 	bic.w	r2, r3, #7
 8002a2c:	4909      	ldr	r1, [pc, #36]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40022000 	.word	0x40022000

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a64:	2300      	movs	r3, #0
 8002a66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d041      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a7c:	d02a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a82:	d824      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a8e:	d81e      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a9a:	e018      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a85      	ldr	r2, [pc, #532]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fabb 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aba:	e00c      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3320      	adds	r3, #32
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fba6 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002acc:	e003      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aea:	4973      	ldr	r1, [pc, #460]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002af2:	e001      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d041      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b0c:	d02a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b12:	d824      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b18:	d008      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b1e:	d81e      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b28:	d010      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b2a:	e018      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b38:	e015      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fa73 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b4a:	e00c      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3320      	adds	r3, #32
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fb5e 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b5c:	e003      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	74fb      	strb	r3, [r7, #19]
      break;
 8002b62:	e000      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b6c:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7a:	494f      	ldr	r1, [pc, #316]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a0 	beq.w	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bcc:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe f8ac 	bl	8000d34 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bde:	e009      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7fe f8a8 	bl	8000d34 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	74fb      	strb	r3, [r7, #19]
        break;
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bf4:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ef      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d15c      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c06:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d019      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d016      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe f867 	bl	8000d34 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c68:	e00b      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe f863 	bl	8000d34 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d902      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c80:	e006      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ec      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cae:	e009      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
 8002cb4:	e006      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc4:	7c7b      	ldrb	r3, [r7, #17]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4b9e      	ldr	r3, [pc, #632]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	4a9d      	ldr	r2, [pc, #628]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce2:	4b98      	ldr	r3, [pc, #608]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 0203 	bic.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	4994      	ldr	r1, [pc, #592]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d04:	4b8f      	ldr	r3, [pc, #572]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 020c 	bic.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	498c      	ldr	r1, [pc, #560]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d26:	4b87      	ldr	r3, [pc, #540]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4983      	ldr	r1, [pc, #524]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d48:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	497b      	ldr	r1, [pc, #492]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	4972      	ldr	r1, [pc, #456]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d8c:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	496a      	ldr	r1, [pc, #424]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	4961      	ldr	r1, [pc, #388]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dd0:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	4959      	ldr	r1, [pc, #356]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df2:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	4950      	ldr	r1, [pc, #320]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e14:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	4948      	ldr	r1, [pc, #288]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	493f      	ldr	r1, [pc, #252]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d028      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e58:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e66:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e76:	d106      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e82:	60d3      	str	r3, [r2, #12]
 8002e84:	e011      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f8c8 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d028      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	491f      	ldr	r1, [pc, #124]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee0:	60d3      	str	r3, [r2, #12]
 8002ee2:	e011      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f899 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f32:	d109      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a02      	ldr	r2, [pc, #8]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
 8002f40:	e014      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f867 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d02f      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f86:	4928      	ldr	r1, [pc, #160]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f844 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d014      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	74bb      	strb	r3, [r7, #18]
 8002fb2:	e011      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3320      	adds	r3, #32
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f925 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff2:	490d      	ldr	r1, [pc, #52]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003016:	4904      	ldr	r1, [pc, #16]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800301e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000

0800302c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d018      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003046:	4b72      	ldr	r3, [pc, #456]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d10d      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
       ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800305e:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
       ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d047      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e044      	b.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d018      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x86>
 8003080:	2b03      	cmp	r3, #3
 8003082:	d825      	bhi.n	80030d0 <RCCEx_PLLSAI1_Config+0xa4>
 8003084:	2b01      	cmp	r3, #1
 8003086:	d002      	beq.n	800308e <RCCEx_PLLSAI1_Config+0x62>
 8003088:	2b02      	cmp	r3, #2
 800308a:	d009      	beq.n	80030a0 <RCCEx_PLLSAI1_Config+0x74>
 800308c:	e020      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800308e:	4b60      	ldr	r3, [pc, #384]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11d      	bne.n	80030d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309e:	e01a      	b.n	80030d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a0:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d116      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e013      	b.n	80030da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030b2:	4b57      	ldr	r3, [pc, #348]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030be:	4b54      	ldr	r3, [pc, #336]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ce:	e006      	b.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e004      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030de:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	430b      	orrs	r3, r1
 80030fc:	4944      	ldr	r1, [pc, #272]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d17d      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003108:	4b41      	ldr	r3, [pc, #260]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a40      	ldr	r2, [pc, #256]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fd fe0e 	bl	8000d34 <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800311a:	e009      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311c:	f7fd fe0a 	bl	8000d34 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d902      	bls.n	8003130 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	73fb      	strb	r3, [r7, #15]
        break;
 800312e:	e005      	b.n	800313c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ef      	bne.n	800311c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d160      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003148:	4b31      	ldr	r3, [pc, #196]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	0211      	lsls	r1, r2, #8
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	0912      	lsrs	r2, r2, #4
 8003160:	0452      	lsls	r2, r2, #17
 8003162:	430a      	orrs	r2, r1
 8003164:	492a      	ldr	r1, [pc, #168]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	610b      	str	r3, [r1, #16]
 800316a:	e027      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d112      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800317a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	0211      	lsls	r1, r2, #8
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6912      	ldr	r2, [r2, #16]
 8003188:	0852      	lsrs	r2, r2, #1
 800318a:	3a01      	subs	r2, #1
 800318c:	0552      	lsls	r2, r2, #21
 800318e:	430a      	orrs	r2, r1
 8003190:	491f      	ldr	r1, [pc, #124]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	610b      	str	r3, [r1, #16]
 8003196:	e011      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6892      	ldr	r2, [r2, #8]
 80031a8:	0211      	lsls	r1, r2, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6952      	ldr	r2, [r2, #20]
 80031ae:	0852      	lsrs	r2, r2, #1
 80031b0:	3a01      	subs	r2, #1
 80031b2:	0652      	lsls	r2, r2, #25
 80031b4:	430a      	orrs	r2, r1
 80031b6:	4916      	ldr	r1, [pc, #88]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a13      	ldr	r2, [pc, #76]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd fdb4 	bl	8000d34 <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ce:	e009      	b.n	80031e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d0:	f7fd fdb0 	bl	8000d34 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	73fb      	strb	r3, [r7, #15]
          break;
 80031e2:	e005      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ef      	beq.n	80031d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	4904      	ldr	r1, [pc, #16]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000

08003214 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003222:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d018      	beq.n	8003260 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d10d      	bne.n	800325a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
       ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003246:	4b61      	ldr	r3, [pc, #388]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
       ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d047      	beq.n	80032ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e044      	b.n	80032ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d018      	beq.n	800329a <RCCEx_PLLSAI2_Config+0x86>
 8003268:	2b03      	cmp	r3, #3
 800326a:	d825      	bhi.n	80032b8 <RCCEx_PLLSAI2_Config+0xa4>
 800326c:	2b01      	cmp	r3, #1
 800326e:	d002      	beq.n	8003276 <RCCEx_PLLSAI2_Config+0x62>
 8003270:	2b02      	cmp	r3, #2
 8003272:	d009      	beq.n	8003288 <RCCEx_PLLSAI2_Config+0x74>
 8003274:	e020      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003276:	4b55      	ldr	r3, [pc, #340]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11d      	bne.n	80032be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003286:	e01a      	b.n	80032be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003298:	e013      	b.n	80032c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800329a:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032b6:	e006      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      break;
 80032bc:	e004      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	430b      	orrs	r3, r1
 80032e4:	4939      	ldr	r1, [pc, #228]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d167      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a35      	ldr	r2, [pc, #212]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fd fd1a 	bl	8000d34 <HAL_GetTick>
 8003300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003302:	e009      	b.n	8003318 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003304:	f7fd fd16 	bl	8000d34 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d902      	bls.n	8003318 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	73fb      	strb	r3, [r7, #15]
        break;
 8003316:	e005      	b.n	8003324 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ef      	bne.n	8003304 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d14a      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6892      	ldr	r2, [r2, #8]
 8003340:	0211      	lsls	r1, r2, #8
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	0912      	lsrs	r2, r2, #4
 8003348:	0452      	lsls	r2, r2, #17
 800334a:	430a      	orrs	r2, r1
 800334c:	491f      	ldr	r1, [pc, #124]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	614b      	str	r3, [r1, #20]
 8003352:	e011      	b.n	8003378 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800335c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6892      	ldr	r2, [r2, #8]
 8003364:	0211      	lsls	r1, r2, #8
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6912      	ldr	r2, [r2, #16]
 800336a:	0852      	lsrs	r2, r2, #1
 800336c:	3a01      	subs	r2, #1
 800336e:	0652      	lsls	r2, r2, #25
 8003370:	430a      	orrs	r2, r1
 8003372:	4916      	ldr	r1, [pc, #88]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fd fcd6 	bl	8000d34 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800338a:	e009      	b.n	80033a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800338c:	f7fd fcd2 	bl	8000d34 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d902      	bls.n	80033a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	73fb      	strb	r3, [r7, #15]
          break;
 800339e:	e005      	b.n	80033ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4904      	ldr	r1, [pc, #16]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e040      	b.n	8003464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fb02 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fe36 	bl	8004088 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fb7b 	bl	8003b18 <UART_SetConfig>
 8003422:	4603      	mov	r3, r0
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e01b      	b.n	8003464 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 feb5 	bl	80041cc <UART_CheckIdleState>
 8003462:	4603      	mov	r3, r0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003480:	2b20      	cmp	r3, #32
 8003482:	d137      	bne.n	80034f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Receive_IT+0x24>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e030      	b.n	80034f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_UART_Receive_IT+0x94>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d01f      	beq.n	80034e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	613b      	str	r3, [r7, #16]
   return(result);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	69f9      	ldr	r1, [r7, #28]
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e6      	bne.n	80034b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 ff7e 	bl	80043ec <UART_Start_Receive_IT>
 80034f0:	4603      	mov	r3, r0
 80034f2:	e000      	b.n	80034f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3728      	adds	r7, #40	; 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40008000 	.word	0x40008000

08003504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0ba      	sub	sp, #232	; 0xe8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800352a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800352e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003532:	4013      	ands	r3, r2
 8003534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d115      	bne.n	800356c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800354c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 82ae 	beq.w	8003abe <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      }
      return;
 800356a:	e2a8      	b.n	8003abe <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800356c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8117 	beq.w	80037a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_UART_IRQHandler+0x298>)
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 810a 	beq.w	80037a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d011      	beq.n	80035c0 <HAL_UART_IRQHandler+0xbc>
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d011      	beq.n	80035f0 <HAL_UART_IRQHandler+0xec>
 80035cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2202      	movs	r2, #2
 80035de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e6:	f043 0204 	orr.w	r2, r3, #4
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d011      	beq.n	8003620 <HAL_UART_IRQHandler+0x11c>
 80035fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2204      	movs	r2, #4
 800360e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800362c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	f043 0208 	orr.w	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800365c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <HAL_UART_IRQHandler+0x18a>
 8003668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8214 	beq.w	8003ac2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d005      	beq.n	80036e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d04f      	beq.n	8003786 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 ff46 	bl	8004578 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d141      	bne.n	800377e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3308      	adds	r3, #8
 8003722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800372a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800373e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1d9      	bne.n	80036fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003752:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <HAL_UART_IRQHandler+0x29c>)
 8003754:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fc69 	bl	8001032 <HAL_DMA_Abort_IT>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d017      	beq.n	8003796 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003770:	4610      	mov	r0, r2
 8003772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	e00f      	b.n	8003796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f9b8 	bl	8003aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	e00b      	b.n	8003796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f9b4 	bl	8003aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	e007      	b.n	8003796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9b0 	bl	8003aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003794:	e195      	b.n	8003ac2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003796:	bf00      	nop
    return;
 8003798:	e193      	b.n	8003ac2 <HAL_UART_IRQHandler+0x5be>
 800379a:	bf00      	nop
 800379c:	04000120 	.word	0x04000120
 80037a0:	08004641 	.word	0x08004641

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 814e 	bne.w	8003a4a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8147 	beq.w	8003a4a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8140 	beq.w	8003a4a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2210      	movs	r2, #16
 80037d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	f040 80b8 	bne.w	8003952 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8167 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003802:	429a      	cmp	r2, r3
 8003804:	f080 815f 	bcs.w	8003ac6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800380e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 8086 	bne.w	8003930 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800384e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800385a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1da      	bne.n	8003824 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800387e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800389a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e1      	bne.n	800386e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e3      	bne.n	80038aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003900:	f023 0310 	bic.w	r3, r3, #16
 8003904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003912:	65bb      	str	r3, [r7, #88]	; 0x58
 8003914:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e4      	bne.n	80038f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fb43 	bl	8000fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003942:	b29b      	uxth	r3, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	b29b      	uxth	r3, r3
 8003948:	4619      	mov	r1, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8d8 	bl	8003b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003950:	e0b9      	b.n	8003ac6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800395e:	b29b      	uxth	r3, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80ab 	beq.w	8003aca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a6 	beq.w	8003aca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
 80039a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e4      	bne.n	800397e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	623b      	str	r3, [r7, #32]
   return(result);
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039d8:	633a      	str	r2, [r7, #48]	; 0x30
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e3      	bne.n	80039b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0310 	bic.w	r3, r3, #16
 8003a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	69b9      	ldr	r1, [r7, #24]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e4      	bne.n	8003a00 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f85c 	bl	8003b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a48:	e03f      	b.n	8003aca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00e      	beq.n	8003a74 <HAL_UART_IRQHandler+0x570>
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 ffe3 	bl	8004a38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a72:	e02d      	b.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01c      	beq.n	8003ace <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
    }
    return;
 8003a9c:	e017      	b.n	8003ace <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d012      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
 8003aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fdd8 	bl	800466c <UART_EndTransmit_IT>
    return;
 8003abc:	e008      	b.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003abe:	bf00      	nop
 8003ac0:	e006      	b.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003ace:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ad0:	37e8      	adds	r7, #232	; 0xe8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop

08003ad8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b08a      	sub	sp, #40	; 0x28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4ba4      	ldr	r3, [pc, #656]	; (8003dd8 <UART_SetConfig+0x2c0>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a99      	ldr	r2, [pc, #612]	; (8003ddc <UART_SetConfig+0x2c4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	4313      	orrs	r3, r2
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a90      	ldr	r2, [pc, #576]	; (8003de0 <UART_SetConfig+0x2c8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d126      	bne.n	8003bf0 <UART_SetConfig+0xd8>
 8003ba2:	4b90      	ldr	r3, [pc, #576]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d81b      	bhi.n	8003be8 <UART_SetConfig+0xd0>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0xa0>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	08003bd1 	.word	0x08003bd1
 8003bc4:	08003be1 	.word	0x08003be1
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e116      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e112      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bde:	e10e      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003be0:	2308      	movs	r3, #8
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be6:	e10a      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003be8:	2310      	movs	r3, #16
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bee:	e106      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7c      	ldr	r2, [pc, #496]	; (8003de8 <UART_SetConfig+0x2d0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d138      	bne.n	8003c6c <UART_SetConfig+0x154>
 8003bfa:	4b7a      	ldr	r3, [pc, #488]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d82d      	bhi.n	8003c64 <UART_SetConfig+0x14c>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0xf8>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003c65 	.word	0x08003c65
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003c65 	.word	0x08003c65
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c65 	.word	0x08003c65
 8003c28:	08003c65 	.word	0x08003c65
 8003c2c:	08003c65 	.word	0x08003c65
 8003c30:	08003c4d 	.word	0x08003c4d
 8003c34:	08003c65 	.word	0x08003c65
 8003c38:	08003c65 	.word	0x08003c65
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c5d 	.word	0x08003c5d
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e0d8      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e0d4      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e0d0      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	e0cc      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e0c8      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5e      	ldr	r2, [pc, #376]	; (8003dec <UART_SetConfig+0x2d4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d125      	bne.n	8003cc2 <UART_SetConfig+0x1aa>
 8003c76:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d016      	beq.n	8003cb2 <UART_SetConfig+0x19a>
 8003c84:	2b30      	cmp	r3, #48	; 0x30
 8003c86:	d818      	bhi.n	8003cba <UART_SetConfig+0x1a2>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d00a      	beq.n	8003ca2 <UART_SetConfig+0x18a>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d814      	bhi.n	8003cba <UART_SetConfig+0x1a2>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <UART_SetConfig+0x182>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d008      	beq.n	8003caa <UART_SetConfig+0x192>
 8003c98:	e00f      	b.n	8003cba <UART_SetConfig+0x1a2>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca0:	e0ad      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca8:	e0a9      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003caa:	2304      	movs	r3, #4
 8003cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb0:	e0a5      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb8:	e0a1      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003cba:	2310      	movs	r3, #16
 8003cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc0:	e09d      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <UART_SetConfig+0x2d8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d125      	bne.n	8003d18 <UART_SetConfig+0x200>
 8003ccc:	4b45      	ldr	r3, [pc, #276]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd8:	d016      	beq.n	8003d08 <UART_SetConfig+0x1f0>
 8003cda:	2bc0      	cmp	r3, #192	; 0xc0
 8003cdc:	d818      	bhi.n	8003d10 <UART_SetConfig+0x1f8>
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d00a      	beq.n	8003cf8 <UART_SetConfig+0x1e0>
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d814      	bhi.n	8003d10 <UART_SetConfig+0x1f8>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <UART_SetConfig+0x1d8>
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d008      	beq.n	8003d00 <UART_SetConfig+0x1e8>
 8003cee:	e00f      	b.n	8003d10 <UART_SetConfig+0x1f8>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e082      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e07e      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d00:	2304      	movs	r3, #4
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d06:	e07a      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0e:	e076      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d10:	2310      	movs	r3, #16
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d16:	e072      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <UART_SetConfig+0x2dc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d12a      	bne.n	8003d78 <UART_SetConfig+0x260>
 8003d22:	4b30      	ldr	r3, [pc, #192]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d30:	d01a      	beq.n	8003d68 <UART_SetConfig+0x250>
 8003d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d36:	d81b      	bhi.n	8003d70 <UART_SetConfig+0x258>
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d00c      	beq.n	8003d58 <UART_SetConfig+0x240>
 8003d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d42:	d815      	bhi.n	8003d70 <UART_SetConfig+0x258>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <UART_SetConfig+0x238>
 8003d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4c:	d008      	beq.n	8003d60 <UART_SetConfig+0x248>
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x258>
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e052      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e04e      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e04a      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e046      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e042      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <UART_SetConfig+0x2c4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d13a      	bne.n	8003df8 <UART_SetConfig+0x2e0>
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d90:	d01a      	beq.n	8003dc8 <UART_SetConfig+0x2b0>
 8003d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d96:	d81b      	bhi.n	8003dd0 <UART_SetConfig+0x2b8>
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9c:	d00c      	beq.n	8003db8 <UART_SetConfig+0x2a0>
 8003d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da2:	d815      	bhi.n	8003dd0 <UART_SetConfig+0x2b8>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x298>
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0x2a8>
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x2b8>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db6:	e022      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbe:	e01e      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc6:	e01a      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e016      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e012      	b.n	8003dfe <UART_SetConfig+0x2e6>
 8003dd8:	efff69f3 	.word	0xefff69f3
 8003ddc:	40008000 	.word	0x40008000
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40004400 	.word	0x40004400
 8003dec:	40004800 	.word	0x40004800
 8003df0:	40004c00 	.word	0x40004c00
 8003df4:	40005000 	.word	0x40005000
 8003df8:	2310      	movs	r3, #16
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a9f      	ldr	r2, [pc, #636]	; (8004080 <UART_SetConfig+0x568>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d17a      	bne.n	8003efe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d824      	bhi.n	8003e5a <UART_SetConfig+0x342>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <UART_SetConfig+0x300>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e5b 	.word	0x08003e5b
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e5b 	.word	0x08003e5b
 8003e28:	08003e4b 	.word	0x08003e4b
 8003e2c:	08003e5b 	.word	0x08003e5b
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e5b 	.word	0x08003e5b
 8003e38:	08003e53 	.word	0x08003e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f7fe fd80 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003e40:	61f8      	str	r0, [r7, #28]
        break;
 8003e42:	e010      	b.n	8003e66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e44:	4b8f      	ldr	r3, [pc, #572]	; (8004084 <UART_SetConfig+0x56c>)
 8003e46:	61fb      	str	r3, [r7, #28]
        break;
 8003e48:	e00d      	b.n	8003e66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4a:	f7fe fce1 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8003e4e:	61f8      	str	r0, [r7, #28]
        break;
 8003e50:	e009      	b.n	8003e66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e56:	61fb      	str	r3, [r7, #28]
        break;
 8003e58:	e005      	b.n	8003e66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80fb 	beq.w	8004064 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d305      	bcc.n	8003e8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d903      	bls.n	8003e92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e90:	e0e8      	b.n	8004064 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2200      	movs	r2, #0
 8003e96:	461c      	mov	r4, r3
 8003e98:	4615      	mov	r5, r2
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	022b      	lsls	r3, r5, #8
 8003ea4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ea8:	0222      	lsls	r2, r4, #8
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	6849      	ldr	r1, [r1, #4]
 8003eae:	0849      	lsrs	r1, r1, #1
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	4688      	mov	r8, r1
 8003eb4:	4681      	mov	r9, r0
 8003eb6:	eb12 0a08 	adds.w	sl, r2, r8
 8003eba:	eb43 0b09 	adc.w	fp, r3, r9
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ecc:	4650      	mov	r0, sl
 8003ece:	4659      	mov	r1, fp
 8003ed0:	f7fc f97a 	bl	80001c8 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4613      	mov	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee2:	d308      	bcc.n	8003ef6 <UART_SetConfig+0x3de>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eea:	d204      	bcs.n	8003ef6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	e0b6      	b.n	8004064 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003efc:	e0b2      	b.n	8004064 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f06:	d15e      	bne.n	8003fc6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d828      	bhi.n	8003f62 <UART_SetConfig+0x44a>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <UART_SetConfig+0x400>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f4d 	.word	0x08003f4d
 8003f24:	08003f63 	.word	0x08003f63
 8003f28:	08003f53 	.word	0x08003f53
 8003f2c:	08003f63 	.word	0x08003f63
 8003f30:	08003f63 	.word	0x08003f63
 8003f34:	08003f63 	.word	0x08003f63
 8003f38:	08003f5b 	.word	0x08003f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f7fe fd00 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003f40:	61f8      	str	r0, [r7, #28]
        break;
 8003f42:	e014      	b.n	8003f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7fe fd12 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8003f48:	61f8      	str	r0, [r7, #28]
        break;
 8003f4a:	e010      	b.n	8003f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f4c:	4b4d      	ldr	r3, [pc, #308]	; (8004084 <UART_SetConfig+0x56c>)
 8003f4e:	61fb      	str	r3, [r7, #28]
        break;
 8003f50:	e00d      	b.n	8003f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f52:	f7fe fc5d 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8003f56:	61f8      	str	r0, [r7, #28]
        break;
 8003f58:	e009      	b.n	8003f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5e:	61fb      	str	r3, [r7, #28]
        break;
 8003f60:	e005      	b.n	8003f6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d077      	beq.n	8004064 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005a      	lsls	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	441a      	add	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b0f      	cmp	r3, #15
 8003f8e:	d916      	bls.n	8003fbe <UART_SetConfig+0x4a6>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f96:	d212      	bcs.n	8003fbe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f023 030f 	bic.w	r3, r3, #15
 8003fa0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	8afa      	ldrh	r2, [r7, #22]
 8003fba:	60da      	str	r2, [r3, #12]
 8003fbc:	e052      	b.n	8004064 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fc4:	e04e      	b.n	8004064 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d827      	bhi.n	800401e <UART_SetConfig+0x506>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x4bc>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	0800401f 	.word	0x0800401f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	0800401f 	.word	0x0800401f
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	08004017 	.word	0x08004017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe fca2 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	61f8      	str	r0, [r7, #28]
        break;
 8003ffe:	e014      	b.n	800402a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7fe fcb4 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8004004:	61f8      	str	r0, [r7, #28]
        break;
 8004006:	e010      	b.n	800402a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <UART_SetConfig+0x56c>)
 800400a:	61fb      	str	r3, [r7, #28]
        break;
 800400c:	e00d      	b.n	800402a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7fe fbff 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8004012:	61f8      	str	r0, [r7, #28]
        break;
 8004014:	e009      	b.n	800402a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	61fb      	str	r3, [r7, #28]
        break;
 800401c:	e005      	b.n	800402a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004028:	bf00      	nop
    }

    if (pclk != 0U)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	085a      	lsrs	r2, r3, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	441a      	add	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d909      	bls.n	800405e <UART_SetConfig+0x546>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d205      	bcs.n	800405e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	e002      	b.n	8004064 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004074:	4618      	mov	r0, r3
 8004076:	3728      	adds	r7, #40	; 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	40008000 	.word	0x40008000
 8004084:	00f42400 	.word	0x00f42400

08004088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01a      	beq.n	800419e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004186:	d10a      	bne.n	800419e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b098      	sub	sp, #96	; 0x60
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041dc:	f7fc fdaa 	bl	8000d34 <HAL_GetTick>
 80041e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d12e      	bne.n	800424e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f8:	2200      	movs	r2, #0
 80041fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f88c 	bl	800431c <UART_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d021      	beq.n	800424e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	653b      	str	r3, [r7, #80]	; 0x50
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
 800422a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800422e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e6      	bne.n	800420a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e062      	b.n	8004314 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d149      	bne.n	80042f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f856 	bl	800431c <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03c      	beq.n	80042f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	623b      	str	r3, [r7, #32]
   return(result);
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800428a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
 8004296:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800429a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c8:	61fa      	str	r2, [r7, #28]
 80042ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	617b      	str	r3, [r7, #20]
   return(result);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e011      	b.n	8004314 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3758      	adds	r7, #88	; 0x58
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432c:	e049      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d045      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fc fcfd 	bl	8000d34 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <UART_WaitOnFlagUntilTimeout+0x30>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e048      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d031      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d110      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f8ff 	bl	8004578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2208      	movs	r2, #8
 800437e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e029      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439c:	d111      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f8e5 	bl	8004578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e00f      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d0a6      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b097      	sub	sp, #92	; 0x5c
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	d10e      	bne.n	800443e <UART_Start_Receive_IT+0x52>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <UART_Start_Receive_IT+0x48>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800442e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004432:	e02d      	b.n	8004490 <UART_Start_Receive_IT+0xa4>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	22ff      	movs	r2, #255	; 0xff
 8004438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800443c:	e028      	b.n	8004490 <UART_Start_Receive_IT+0xa4>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <UART_Start_Receive_IT+0x76>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <UART_Start_Receive_IT+0x6c>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	22ff      	movs	r2, #255	; 0xff
 8004452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004456:	e01b      	b.n	8004490 <UART_Start_Receive_IT+0xa4>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	227f      	movs	r2, #127	; 0x7f
 800445c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004460:	e016      	b.n	8004490 <UART_Start_Receive_IT+0xa4>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800446a:	d10d      	bne.n	8004488 <UART_Start_Receive_IT+0x9c>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <UART_Start_Receive_IT+0x92>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	227f      	movs	r2, #127	; 0x7f
 8004478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800447c:	e008      	b.n	8004490 <UART_Start_Receive_IT+0xa4>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	223f      	movs	r2, #63	; 0x3f
 8004482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004486:	e003      	b.n	8004490 <UART_Start_Receive_IT+0xa4>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2222      	movs	r2, #34	; 0x22
 800449c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	657b      	str	r3, [r7, #84]	; 0x54
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044dc:	d107      	bne.n	80044ee <UART_Start_Receive_IT+0x102>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d103      	bne.n	80044ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a21      	ldr	r2, [pc, #132]	; (8004570 <UART_Start_Receive_IT+0x184>)
 80044ea:	669a      	str	r2, [r3, #104]	; 0x68
 80044ec:	e002      	b.n	80044f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <UART_Start_Receive_IT+0x188>)
 80044f2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d019      	beq.n	8004530 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
 800451c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e6      	bne.n	80044fc <UART_Start_Receive_IT+0x110>
 800452e:	e018      	b.n	8004562 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	613b      	str	r3, [r7, #16]
   return(result);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f043 0320 	orr.w	r3, r3, #32
 8004544:	653b      	str	r3, [r7, #80]	; 0x50
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	69f9      	ldr	r1, [r7, #28]
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	61bb      	str	r3, [r7, #24]
   return(result);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e6      	bne.n	8004530 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	375c      	adds	r7, #92	; 0x5c
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	0800487d 	.word	0x0800487d
 8004574:	080046c1 	.word	0x080046c1

08004578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b095      	sub	sp, #84	; 0x54
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
 80045a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3308      	adds	r3, #8
 80045b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3308      	adds	r3, #8
 80045d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e5      	bne.n	80045b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d118      	bne.n	8004620 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f023 0310 	bic.w	r3, r3, #16
 8004602:	647b      	str	r3, [r7, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6979      	ldr	r1, [r7, #20]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	613b      	str	r3, [r7, #16]
   return(result);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e6      	bne.n	80045ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004634:	bf00      	nop
 8004636:	3754      	adds	r7, #84	; 0x54
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff fa44 	bl	8003aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	60bb      	str	r3, [r7, #8]
   return(result);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	613b      	str	r3, [r7, #16]
   return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e6      	bne.n	8004674 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fa10 	bl	8003ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b09c      	sub	sp, #112	; 0x70
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d8:	2b22      	cmp	r3, #34	; 0x22
 80046da:	f040 80be 	bne.w	800485a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046ec:	b2d9      	uxtb	r1, r3
 80046ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f8:	400a      	ands	r2, r1
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 80a3 	bne.w	800486e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800473c:	66bb      	str	r3, [r7, #104]	; 0x68
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004746:	65bb      	str	r3, [r7, #88]	; 0x58
 8004748:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800474c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e6      	bne.n	8004728 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3308      	adds	r3, #8
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	667b      	str	r3, [r7, #100]	; 0x64
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800477a:	647a      	str	r2, [r7, #68]	; 0x44
 800477c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a34      	ldr	r2, [pc, #208]	; (8004878 <UART_RxISR_8BIT+0x1b8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d01f      	beq.n	80047ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d018      	beq.n	80047ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	623b      	str	r3, [r7, #32]
   return(result);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ce:	663b      	str	r3, [r7, #96]	; 0x60
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30
 80047da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e6      	bne.n	80047ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d12e      	bne.n	8004852 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	60fb      	str	r3, [r7, #12]
   return(result);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0310 	bic.w	r3, r3, #16
 800480e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	69b9      	ldr	r1, [r7, #24]
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	617b      	str	r3, [r7, #20]
   return(result);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d103      	bne.n	8004842 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2210      	movs	r2, #16
 8004840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff f958 	bl	8003b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004850:	e00d      	b.n	800486e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fb fe36 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8004858:	e009      	b.n	800486e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	8b1b      	ldrh	r3, [r3, #24]
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0208 	orr.w	r2, r2, #8
 800486a:	b292      	uxth	r2, r2
 800486c:	831a      	strh	r2, [r3, #24]
}
 800486e:	bf00      	nop
 8004870:	3770      	adds	r7, #112	; 0x70
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40008000 	.word	0x40008000

0800487c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b09c      	sub	sp, #112	; 0x70
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800488a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004894:	2b22      	cmp	r3, #34	; 0x22
 8004896:	f040 80be 	bne.w	8004a16 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80048aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80048ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	1c9a      	adds	r2, r3, #2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 80a3 	bne.w	8004a2a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80048f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f8:	667b      	str	r3, [r7, #100]	; 0x64
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004902:	657b      	str	r3, [r7, #84]	; 0x54
 8004904:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e6      	bne.n	80048e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	663b      	str	r3, [r7, #96]	; 0x60
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3308      	adds	r3, #8
 8004934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004936:	643a      	str	r2, [r7, #64]	; 0x40
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800493c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <UART_RxISR_16BIT+0x1b8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d01f      	beq.n	80049a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d018      	beq.n	80049a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	61fb      	str	r3, [r7, #28]
   return(result);
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800498a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004996:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d12e      	bne.n	8004a0e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 0310 	bic.w	r3, r3, #16
 80049ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6979      	ldr	r1, [r7, #20]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	613b      	str	r3, [r7, #16]
   return(result);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d103      	bne.n	80049fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2210      	movs	r2, #16
 80049fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff f87a 	bl	8003b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a0c:	e00d      	b.n	8004a2a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fb fd58 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8004a14:	e009      	b.n	8004a2a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	8b1b      	ldrh	r3, [r3, #24]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0208 	orr.w	r2, r2, #8
 8004a26:	b292      	uxth	r2, r2
 8004a28:	831a      	strh	r2, [r3, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	3770      	adds	r7, #112	; 0x70
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40008000 	.word	0x40008000

08004a38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	729a      	strb	r2, [r3, #10]
}
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	8892      	ldrh	r2, [r2, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	889b      	ldrh	r3, [r3, #4]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	8912      	ldrh	r2, [r2, #8]
 8004aa8:	fb93 f1f2 	sdiv	r1, r3, r2
 8004aac:	fb01 f202 	mul.w	r2, r1, r2
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	7a9b      	ldrb	r3, [r3, #10]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00c      	beq.n	8004ada <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	88db      	ldrh	r3, [r3, #6]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	8912      	ldrh	r2, [r2, #8]
 8004aca:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ace:	fb01 f202 	mul.w	r2, r1, r2
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	889a      	ldrh	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	88db      	ldrh	r3, [r3, #6]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d104      	bne.n	8004af0 <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	729a      	strb	r2, [r3, #10]
		return 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <ring_buffer_put+0x6e>
	}
	return 1;
 8004af0:	2301      	movs	r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <ring_buffer_is_full>:

/**
 * @brief this function checks if the buffer is full
 */
uint8_t ring_buffer_is_full(ring_buffer_t *ring_buffer)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
	return (ring_buffer->is_full != 0);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7a9b      	ldrb	r3, [r3, #10]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf14      	ite	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	2300      	moveq	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <ring_buffer_reset>:

/**
 * @brief this function resets the buffer to be empty
 */
void ring_buffer_reset(ring_buffer_t *ring_buffer)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	ring_buffer->tail = 0;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	80da      	strh	r2, [r3, #6]
	ring_buffer->head = 0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	809a      	strh	r2, [r3, #4]
	ring_buffer->is_full = 0;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	729a      	strb	r2, [r3, #10]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004b4a:	bf00      	nop
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	9302      	str	r3, [sp, #8]
 8004b64:	2301      	movs	r3, #1
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	1dfb      	adds	r3, r7, #7
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2178      	movs	r1, #120	; 0x78
 8004b72:	4803      	ldr	r0, [pc, #12]	; (8004b80 <ssd1306_WriteCommand+0x2c>)
 8004b74:	f7fc fcfc 	bl	8001570 <HAL_I2C_Mem_Write>
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	2000003c 	.word	0x2000003c

08004b84 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af04      	add	r7, sp, #16
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f04f 32ff 	mov.w	r2, #4294967295
 8004b96:	9202      	str	r2, [sp, #8]
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	2240      	movs	r2, #64	; 0x40
 8004ba2:	2178      	movs	r1, #120	; 0x78
 8004ba4:	4803      	ldr	r0, [pc, #12]	; (8004bb4 <ssd1306_WriteData+0x30>)
 8004ba6:	f7fc fce3 	bl	8001570 <HAL_I2C_Mem_Write>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	2000003c 	.word	0x2000003c

08004bb8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004bbc:	f7ff ffc3 	bl	8004b46 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004bc0:	2064      	movs	r0, #100	; 0x64
 8004bc2:	f7fc f8c3 	bl	8000d4c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f000 f9da 	bl	8004f80 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004bcc:	2020      	movs	r0, #32
 8004bce:	f7ff ffc1 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f7ff ffbe 	bl	8004b54 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004bd8:	20b0      	movs	r0, #176	; 0xb0
 8004bda:	f7ff ffbb 	bl	8004b54 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004bde:	20c8      	movs	r0, #200	; 0xc8
 8004be0:	f7ff ffb8 	bl	8004b54 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7ff ffb5 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004bea:	2010      	movs	r0, #16
 8004bec:	f7ff ffb2 	bl	8004b54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004bf0:	2040      	movs	r0, #64	; 0x40
 8004bf2:	f7ff ffaf 	bl	8004b54 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004bf6:	20ff      	movs	r0, #255	; 0xff
 8004bf8:	f000 f9ae 	bl	8004f58 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004bfc:	20a1      	movs	r0, #161	; 0xa1
 8004bfe:	f7ff ffa9 	bl	8004b54 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004c02:	20a6      	movs	r0, #166	; 0xa6
 8004c04:	f7ff ffa6 	bl	8004b54 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004c08:	20a8      	movs	r0, #168	; 0xa8
 8004c0a:	f7ff ffa3 	bl	8004b54 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004c0e:	203f      	movs	r0, #63	; 0x3f
 8004c10:	f7ff ffa0 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004c14:	20a4      	movs	r0, #164	; 0xa4
 8004c16:	f7ff ff9d 	bl	8004b54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004c1a:	20d3      	movs	r0, #211	; 0xd3
 8004c1c:	f7ff ff9a 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004c20:	2000      	movs	r0, #0
 8004c22:	f7ff ff97 	bl	8004b54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004c26:	20d5      	movs	r0, #213	; 0xd5
 8004c28:	f7ff ff94 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004c2c:	20f0      	movs	r0, #240	; 0xf0
 8004c2e:	f7ff ff91 	bl	8004b54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004c32:	20d9      	movs	r0, #217	; 0xd9
 8004c34:	f7ff ff8e 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004c38:	2022      	movs	r0, #34	; 0x22
 8004c3a:	f7ff ff8b 	bl	8004b54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004c3e:	20da      	movs	r0, #218	; 0xda
 8004c40:	f7ff ff88 	bl	8004b54 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004c44:	2012      	movs	r0, #18
 8004c46:	f7ff ff85 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004c4a:	20db      	movs	r0, #219	; 0xdb
 8004c4c:	f7ff ff82 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004c50:	2020      	movs	r0, #32
 8004c52:	f7ff ff7f 	bl	8004b54 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004c56:	208d      	movs	r0, #141	; 0x8d
 8004c58:	f7ff ff7c 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004c5c:	2014      	movs	r0, #20
 8004c5e:	f7ff ff79 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004c62:	2001      	movs	r0, #1
 8004c64:	f000 f98c 	bl	8004f80 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f000 f80f 	bl	8004c8c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004c6e:	f000 f831 	bl	8004cd4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <ssd1306_Init+0xd0>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <ssd1306_Init+0xd0>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004c7e:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <ssd1306_Init+0xd0>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	711a      	strb	r2, [r3, #4]
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200005d8 	.word	0x200005d8

08004c8c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e00d      	b.n	8004cb8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <ssd1306_Fill+0x1a>
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	e000      	b.n	8004ca8 <ssd1306_Fill+0x1c>
 8004ca6:	21ff      	movs	r1, #255	; 0xff
 8004ca8:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <ssd1306_Fill+0x44>)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	460a      	mov	r2, r1
 8004cb0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d3ed      	bcc.n	8004c9c <ssd1306_Fill+0x10>
    }
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	200001d8 	.word	0x200001d8

08004cd4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004cda:	2300      	movs	r3, #0
 8004cdc:	71fb      	strb	r3, [r7, #7]
 8004cde:	e016      	b.n	8004d0e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	3b50      	subs	r3, #80	; 0x50
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ff34 	bl	8004b54 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004cec:	2000      	movs	r0, #0
 8004cee:	f7ff ff31 	bl	8004b54 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004cf2:	2010      	movs	r0, #16
 8004cf4:	f7ff ff2e 	bl	8004b54 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	01db      	lsls	r3, r3, #7
 8004cfc:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <ssd1306_UpdateScreen+0x4c>)
 8004cfe:	4413      	add	r3, r2
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff3e 	bl	8004b84 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	71fb      	strb	r3, [r7, #7]
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	d9e5      	bls.n	8004ce0 <ssd1306_UpdateScreen+0xc>
    }
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	200001d8 	.word	0x200001d8

08004d24 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	71bb      	strb	r3, [r7, #6]
 8004d32:	4613      	mov	r3, r2
 8004d34:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	db3d      	blt.n	8004dba <ssd1306_DrawPixel+0x96>
 8004d3e:	79bb      	ldrb	r3, [r7, #6]
 8004d40:	2b3f      	cmp	r3, #63	; 0x3f
 8004d42:	d83a      	bhi.n	8004dba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004d44:	797b      	ldrb	r3, [r7, #5]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d11a      	bne.n	8004d80 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004d4a:	79fa      	ldrb	r2, [r7, #7]
 8004d4c:	79bb      	ldrb	r3, [r7, #6]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	b2d8      	uxtb	r0, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	01db      	lsls	r3, r3, #7
 8004d56:	4413      	add	r3, r2
 8004d58:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <ssd1306_DrawPixel+0xa4>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	b25a      	sxtb	r2, r3
 8004d5e:	79bb      	ldrb	r3, [r7, #6]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b259      	sxtb	r1, r3
 8004d70:	79fa      	ldrb	r2, [r7, #7]
 8004d72:	4603      	mov	r3, r0
 8004d74:	01db      	lsls	r3, r3, #7
 8004d76:	4413      	add	r3, r2
 8004d78:	b2c9      	uxtb	r1, r1
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <ssd1306_DrawPixel+0xa4>)
 8004d7c:	54d1      	strb	r1, [r2, r3]
 8004d7e:	e01d      	b.n	8004dbc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004d80:	79fa      	ldrb	r2, [r7, #7]
 8004d82:	79bb      	ldrb	r3, [r7, #6]
 8004d84:	08db      	lsrs	r3, r3, #3
 8004d86:	b2d8      	uxtb	r0, r3
 8004d88:	4603      	mov	r3, r0
 8004d8a:	01db      	lsls	r3, r3, #7
 8004d8c:	4413      	add	r3, r2
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <ssd1306_DrawPixel+0xa4>)
 8004d90:	5cd3      	ldrb	r3, [r2, r3]
 8004d92:	b25a      	sxtb	r2, r3
 8004d94:	79bb      	ldrb	r3, [r7, #6]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	4013      	ands	r3, r2
 8004da8:	b259      	sxtb	r1, r3
 8004daa:	79fa      	ldrb	r2, [r7, #7]
 8004dac:	4603      	mov	r3, r0
 8004dae:	01db      	lsls	r3, r3, #7
 8004db0:	4413      	add	r3, r2
 8004db2:	b2c9      	uxtb	r1, r1
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <ssd1306_DrawPixel+0xa4>)
 8004db6:	54d1      	strb	r1, [r2, r3]
 8004db8:	e000      	b.n	8004dbc <ssd1306_DrawPixel+0x98>
        return;
 8004dba:	bf00      	nop
    }
}
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	200001d8 	.word	0x200001d8

08004dcc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	1d38      	adds	r0, r7, #4
 8004dd6:	e880 0006 	stmia.w	r0, {r1, r2}
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4623      	mov	r3, r4
 8004dde:	73fb      	strb	r3, [r7, #15]
 8004de0:	4613      	mov	r3, r2
 8004de2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b1f      	cmp	r3, #31
 8004de8:	d902      	bls.n	8004df0 <ssd1306_WriteChar+0x24>
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b7e      	cmp	r3, #126	; 0x7e
 8004dee:	d901      	bls.n	8004df4 <ssd1306_WriteChar+0x28>
        return 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e06d      	b.n	8004ed0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004df4:	4b38      	ldr	r3, [pc, #224]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	793b      	ldrb	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	dc06      	bgt.n	8004e10 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004e02:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004e04:	885b      	ldrh	r3, [r3, #2]
 8004e06:	461a      	mov	r2, r3
 8004e08:	797b      	ldrb	r3, [r7, #5]
 8004e0a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	dd01      	ble.n	8004e14 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	e05d      	b.n	8004ed0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	e04c      	b.n	8004eb4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	3b20      	subs	r3, #32
 8004e20:	7979      	ldrb	r1, [r7, #5]
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	4619      	mov	r1, r3
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	440b      	add	r3, r1
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	e034      	b.n	8004ea4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004e4a:	4b23      	ldr	r3, [pc, #140]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	b2d8      	uxtb	r0, r3
 8004e58:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004e5a:	885b      	ldrh	r3, [r3, #2]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	7bba      	ldrb	r2, [r7, #14]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7ff ff5b 	bl	8004d24 <ssd1306_DrawPixel>
 8004e6e:	e016      	b.n	8004e9e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	b2d8      	uxtb	r0, r3
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004e80:	885b      	ldrh	r3, [r3, #2]
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	b2d9      	uxtb	r1, r3
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f7ff ff43 	bl	8004d24 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	793b      	ldrb	r3, [r7, #4]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d3c5      	bcc.n	8004e3a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	797b      	ldrb	r3, [r7, #5]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d3ad      	bcc.n	8004e1a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004ec0:	881a      	ldrh	r2, [r3, #0]
 8004ec2:	793b      	ldrb	r3, [r7, #4]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <ssd1306_WriteChar+0x10c>)
 8004ecc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3724      	adds	r7, #36	; 0x24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd90      	pop	{r4, r7, pc}
 8004ed8:	200005d8 	.word	0x200005d8

08004edc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	1d38      	adds	r0, r7, #4
 8004ee6:	e880 0006 	stmia.w	r0, {r1, r2}
 8004eea:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004eec:	e012      	b.n	8004f14 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	7818      	ldrb	r0, [r3, #0]
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	1d3a      	adds	r2, r7, #4
 8004ef6:	ca06      	ldmia	r2, {r1, r2}
 8004ef8:	f7ff ff68 	bl	8004dcc <ssd1306_WriteChar>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d002      	beq.n	8004f0e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	e008      	b.n	8004f20 <ssd1306_WriteString+0x44>
        }
        str++;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e8      	bne.n	8004eee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460a      	mov	r2, r1
 8004f32:	71fb      	strb	r3, [r7, #7]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <ssd1306_SetCursor+0x2c>)
 8004f3e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004f40:	79bb      	ldrb	r3, [r7, #6]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <ssd1306_SetCursor+0x2c>)
 8004f46:	805a      	strh	r2, [r3, #2]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	200005d8 	.word	0x200005d8

08004f58 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004f62:	2381      	movs	r3, #129	; 0x81
 8004f64:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fdf3 	bl	8004b54 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fdef 	bl	8004b54 <ssd1306_WriteCommand>
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004f90:	23af      	movs	r3, #175	; 0xaf
 8004f92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004f94:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <ssd1306_SetDisplayOn+0x38>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	715a      	strb	r2, [r3, #5]
 8004f9a:	e004      	b.n	8004fa6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004f9c:	23ae      	movs	r3, #174	; 0xae
 8004f9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <ssd1306_SetDisplayOn+0x38>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fdd3 	bl	8004b54 <ssd1306_WriteCommand>
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200005d8 	.word	0x200005d8

08004fbc <memcmp>:
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	3901      	subs	r1, #1
 8004fc0:	4402      	add	r2, r0
 8004fc2:	4290      	cmp	r0, r2
 8004fc4:	d101      	bne.n	8004fca <memcmp+0xe>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e005      	b.n	8004fd6 <memcmp+0x1a>
 8004fca:	7803      	ldrb	r3, [r0, #0]
 8004fcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d001      	beq.n	8004fd8 <memcmp+0x1c>
 8004fd4:	1b18      	subs	r0, r3, r4
 8004fd6:	bd10      	pop	{r4, pc}
 8004fd8:	3001      	adds	r0, #1
 8004fda:	e7f2      	b.n	8004fc2 <memcmp+0x6>

08004fdc <memset>:
 8004fdc:	4402      	add	r2, r0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <memset+0xa>
 8004fe4:	4770      	bx	lr
 8004fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fea:	e7f9      	b.n	8004fe0 <memset+0x4>

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4d0d      	ldr	r5, [pc, #52]	; (8005024 <__libc_init_array+0x38>)
 8004ff0:	4c0d      	ldr	r4, [pc, #52]	; (8005028 <__libc_init_array+0x3c>)
 8004ff2:	1b64      	subs	r4, r4, r5
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	2600      	movs	r6, #0
 8004ff8:	42a6      	cmp	r6, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	4d0b      	ldr	r5, [pc, #44]	; (800502c <__libc_init_array+0x40>)
 8004ffe:	4c0c      	ldr	r4, [pc, #48]	; (8005030 <__libc_init_array+0x44>)
 8005000:	f000 f818 	bl	8005034 <_init>
 8005004:	1b64      	subs	r4, r4, r5
 8005006:	10a4      	asrs	r4, r4, #2
 8005008:	2600      	movs	r6, #0
 800500a:	42a6      	cmp	r6, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f855 3b04 	ldr.w	r3, [r5], #4
 8005014:	4798      	blx	r3
 8005016:	3601      	adds	r6, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f855 3b04 	ldr.w	r3, [r5], #4
 800501e:	4798      	blx	r3
 8005020:	3601      	adds	r6, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	08005e1c 	.word	0x08005e1c
 8005028:	08005e1c 	.word	0x08005e1c
 800502c:	08005e1c 	.word	0x08005e1c
 8005030:	08005e20 	.word	0x08005e20

08005034 <_init>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

08005040 <_fini>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr
